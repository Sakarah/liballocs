#!/usr/bin/env python3

# Compiler wrapper for liballocs.
# We mostly delegate to cilly,passing --save-temps=$( dirname "$inputfile" )
# i.e. to ensure that temporaries get created in the source file's location
# FIXME: This might break some builds using a separate objdir.
# The Right Thing to do is to somehow replicate the source directory structure
# rooted at the current directory. But it's not clear how to do this in general.

import os, sys, json
# HACK
liballocs_base = os.path.realpath(os.path.dirname(__file__) + "/../../../..")
sys.path.append(liballocs_base + "/tools")
from allocscompilerwrapper import *
cilly_cmd = liballocs_base + "/tools/lang/c/cil/bin/cilly"
existing_ocamlpath = os.environ.get("OCAMLPATH")
if existing_ocamlpath == None:
    existing_ocamlpath = ""
os.putenv("OCAMLPATH", (liballocs_base + "/tools/lang/c/cil/lib:") + existing_ocamlpath)
os.putenv("LANG", "C") # Allow allocscc to be called with non-english locales

class AllocsCC(AllocsCompilerWrapper):

    def defaultAllocFns(self):
        if not hasattr(self, "libc_allocators"):
            libc_allocator_file = open(liballocs_base + "/tools/lang/c/libc_allocators.json")
            self.libc_allocators = json.load(libc_allocator_file)
        return self.libc_allocators

    def getCustomCompileArgs(self):
        # "-pipe" interferes with -save-temps, with disastrous conseqeunces
        # trying to create files named "-.i", "-.s" which then get interpreted
        # as command-line options.
        #saveTempsArgs = ['-save-temps']
        if not '-pipe' in self.allArgs.values():
            saveTempsArgs = ['-save-temps']
        else:
            saveTempsArgs = []
        # bit of a HACK: always give a '-std=' arg to cilly
        # -- this gets around cilly's lack of default -std=gnu89, w.r.t. extern inline semantics
        stdArgs = [arg for arg in self.allArgs.values() if arg.startswith('-std=')]
        if not stdArgs:
            maybeSetStdArg = ['-std=gnu89']
        else:
            maybeSetStdArg = []
        for sourceFile in self.getSourceInputFiles():
            dirname = os.path.dirname(sourceFile)
            # FIXME: support multiple distinct directories here, if cilly can
            if dirname != "":
                 saveTempsArgs = ["--save-temps=" + dirname]
        return AllocsCompilerWrapper.getCustomCompileArgs(self) \
        + saveTempsArgs + maybeSetStdArg
    
    def areAllSourceFilesC(self, sourceFiles):
        allSourceFilesAreC = True
        for sourceFile in sourceFiles:
            if sourceFile.lang != "c" and not sourceFile.endswith(".c"):
                self.debugMsg("No source files, or not all are C files")
                allSourceFilesAreC = False
        if allSourceFilesAreC:
            self.debugMsg("All source files (%d) are C files\n" % len(sourceFiles))
        return allSourceFilesAreC

    def getIncludeArgs(self, sourceFiles):
        return ["-include", \
               os.path.dirname(__file__) + "/../../../../include/liballocs_cil_inlines.h"] \
               if len(sourceFiles) > 0 and self.areAllSourceFilesC(sourceFiles) else []

    def getCillyArgs(self, sourceFiles):
        allSourceFilesAreC = self.areAllSourceFilesC(sourceFiles)
        # We can only do monalloca, and anything else that involves -include, 
        # if we're compiling only C files. HMM. So if I pass a mixture of C files
        # and non-C files, this will get screwed up. But we should never do this;
        # we should generate the .o files individually in that case. FIXME: make that so.
        # FIXME: need --save-temps because otherwise the .i.allocs files are created in /tmp.
        # Should fix this.
        #"--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/dumpmemacc/dumpmemacc.cmxs"), \
        #   "--dodumpmemacc", \
        return [
            "--save-temps",
            "--decil",
            "--native",
            "--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/cilallocs/cilallocs.cmxs"),
            "--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/dumpallocs/dumpallocs.cmxs"),
            "--dodumpallocs",
            "--keepunused",
            "--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/monalloca/monalloca.cmxs")] + \
            (["--domonalloca"]
                if len(sourceFiles) > 0 and allSourceFilesAreC else []) + \
            ["-Wno-unused-variable", "-Wno-unused-label"] + \
            (["--load=%s" % (self.getLibAllocsBaseDir() + "tools/lang/c/trapptrwrites/trapptrwrites.cmxs"),
            "--dotrap-ptr-writes"] if "LIFETIME_POLICIES" in self.getLibAllocsFeatures() else [])
        # We need the above -Wno-unused-... because CIL creates
        # some unused stuff (unavoidably, I believe) which will
        # make compilation done with -Werror barf if we don't
        # silence them.

    def getBasicCompilerCommand(self):
        return [cilly_cmd]
        
    def getExtraLinkArgs(self):
        return []
        
    def getExtraRelocLinkArgs(self):
        return []

    def getVerboseArgs(self):
        return []
    
    def getCompilerCommand(self, itemsAndOptions, phases):
        sourceFiles = [x for x in itemsAndOptions if isinstance(x, SourceFile)]
        return AllocsCompilerWrapper.getCompilerCommand(self, itemsAndOptions, phases) + \
            self.getIncludeArgs(sourceFiles) + self.getCillyArgs(sourceFiles) + self.getVerboseArgs() + \
            (self.getExtraLinkArgs() if FAKE_RELOC_LINK not in phases else self.getExtraRelocLinkArgs())

if __name__ == '__main__':
    wrapper = AllocsCC()
    ret = wrapper.main()
    exit(ret)

